package com.aiko.pact.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.aiko.common.util.AjaxObject;
import com.aiko.common.util.SAPUtils;
import com.aiko.config.wxcp.WxcpApi;
import com.aiko.deliveryplan.dto.AikoDeliveryPlan;
import com.aiko.pact.dto.AikoContract;
import com.aiko.pact.entity.WuLiao;
import com.google.gson.Gson;

import me.chanjar.weixin.cp.bean.WxCpMessage;

/** 
* @author Jianglinle
* @date 2017年10月24日 下午4:34:30 
* @version 1.0.0
* @aiko-crm
*/ 
@Controller()
@RequestMapping("/test")
public class TestController {
	/*
	 * @Value("${spring.upload.path}") public String ROOT;
	 */
	private Logger logger = LoggerFactory.getLogger(getClass());
	@RequestMapping("/test1")
	public String test1() {
		return "test/test1";
	}

	@GetMapping("/test2")
	public String test2() {
		return "test/test2";
	}

	@RequestMapping(value = "/testupload", method = RequestMethod.POST)
	@ResponseBody
	public String upload(@RequestParam("file") MultipartFile file, 
			@RequestParam("file1") String file1,
			HttpServletRequest request) throws UnsupportedEncodingException {
		if (!file.isEmpty()) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String datePath = sdf.format(new Date());
			/*
			 * String contextPath = request.getContextPath();//"/SpringMvcFileUpload" String
			 * servletPath = request.getServletPath();//"/gotoAction" String scheme =
			 * request.getScheme();//"http"
			 */

			// String storePath=
			// "E:\\project\\SpringMvcFileUpload\\WebRoot\\images";//存放我们上传的文件路径
			// String storePath= "E:\\test";//存放我们上传的文件路径
			// String path = request.getServletContext().getRealPath("/files/");
			//String path = ClassUtils.getDefaultClassLoader().getResource("").getPath() + "files/";
			String path = "E:\\spring-cloud\\common\\" + datePath +"\\";
			String fileName = file1;
			System.out.println(path+fileName);
			File filepath = new File(path, fileName);
			if (!filepath.getParentFile().exists()) {
				filepath.getParentFile().mkdirs();// 如果目录不存在，创建目录
			}
			try {
				file.transferTo(new File(path + File.separator + fileName));// 把文件写入目标文件地址
			} catch (Exception e) {
				e.printStackTrace();
				return "上传失败！";
			}
			return fileName;// 返回到成功页面
		} else {
			return "上传失败！";// 返回到失败的页面
		}
	}

	@PostMapping("/testHttpMessageDown")
	public ResponseEntity<byte[]> download(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("fileName") String fileName) throws IOException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String datePath = sdf.format(new Date());
		System.out.println(fileName);
		//String path = ClassUtils.getDefaultClassLoader().getResource("").getPath() + "files/";
		String path = "E:\\spring-cloud\\common\\" + datePath +"\\";
		File file = new File(path + fileName);
		byte[] body = null;
		InputStream is = new FileInputStream(file);
		body = new byte[is.available()];
		is.read(body);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Disposition", "attchement;filename=" + file.getName());
		response.addHeader("Content-Disposition",
				"attachment;filename=" + new String(fileName.getBytes("utf-8"), "iso-8859-1"));
		HttpStatus statusCode = HttpStatus.OK;
		ResponseEntity<byte[]> entity = new ResponseEntity<byte[]>(body, headers, statusCode);
		is.close();
		return entity;
	}

	@PostMapping("/showPactDown")
	public ResponseEntity<byte[]> pactDownload(HttpServletRequest request, HttpServletResponse response,
			@RequestParam("path") String path,
			@RequestParam("fileName") String fileName) throws IOException {
		/*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String datePath = sdf.format(new Date());*/
		System.out.println(fileName);
		//String path = ClassUtils.getDefaultClassLoader().getResource("").getPath() + "files/";
		String patha = "E:\\spring-cloud\\common\\" + path +"\\"+fileName;
		File file = new File(patha);
		byte[] body = null;
		InputStream is = new FileInputStream(file);
		body = new byte[is.available()];
		is.read(body);
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-Disposition", "attchement;filename=" + file.getName());
		response.addHeader("Content-Disposition",
				"attachment;filename=" + new String(fileName.getBytes("utf-8"), "iso-8859-1"));
		HttpStatus statusCode = HttpStatus.OK;
		ResponseEntity<byte[]> entity = new ResponseEntity<byte[]>(body, headers, statusCode);
		is.close();
		return entity;
	}

	/*
	 * @RequestMapping(value="/testHttpMessageDown/{fileName}") public
	 * ResponseEntity<byte[]> download(HttpServletRequest request,
	 * 
	 * @RequestParam("filename") String filename, Model model)throws Exception {
	 * //下载文件路径 String path = request.getServletContext().getRealPath("/images/");
	 * File file = new File(path + File.separator + filename); HttpHeaders headers =
	 * new HttpHeaders(); //下载显示的文件名，解决中文名称乱码问题 String downloadFielName = new
	 * String(filename.getBytes("UTF-8"),"iso-8859-1"); //通知浏览器以attachment（下载方式）打开图片
	 * headers.setContentDispositionFormData("attachment", downloadFielName);
	 * //application/octet-stream ： 二进制流数据（最常见的文件下载）。
	 * headers.setContentType(MediaType.APPLICATION_OCTET_STREAM); return new
	 * ResponseEntity<byte[]>(FileUtils.readFileToByteArray(file), headers,
	 * HttpStatus.CREATED); }
	 */

	@RequestMapping(value = "/system/test")
	@ResponseBody
	public AjaxObject sendText(){	
		AjaxObject returnVal = new AjaxObject();
		try {
			WxCpMessage msg=new WxCpMessage();
			Gson gson = new Gson();
			MultiValueMap<String, Object> requestEntity = new LinkedMultiValueMap<String, Object>();
			//推送TEXT
			msg.setAgentId(74);//企业应用id
			msg.setContent("测试信息");
			msg.setToUser("1016046");//1013608|1014906|1014709
			requestEntity.add("requestJson", gson.toJson(msg));
			//跳转url,可不传,url中会默认一个参数userid,值为微信接收人的工号
			requestEntity.add("redirectUri","http://portal.aikosolar.com/?test=2");
			
			String result=WxcpApi.send(WxcpApi.TEXT,requestEntity);
			
			//推送NEWS
			/*msg.setAgentId(74);//企业应用id
			msg.setToUser("1013608");
			List<NewArticle> articleList=new ArrayList<NewArticle>();
			NewArticle article1=new NewArticle();
			article1.setTitle("中五百万啦");
			article1.setDescription("中奖号码为：\n32,14,24,12,15,66");
			//图片路径	article1.setPicUrl("http://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAugkDPqLwlFtVibiaVyEesmmLISx6HFCV54nIQNnCq4RLRlMek6ibUsFwYD5cLLnIiabPKiaQMSlibumbs0g/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1");
			//详情
			article1.setUrl("http://mp.weixin.qq.com/s/lGmY8zu22zVKrU1eM3oQFw");		
			articleList.add(article1);

			NewArticle article2=new NewArticle();
			article2.setTitle("可以买个铺位啦");
			article2.setDescription("地址：xxxx");
			article2.setPicUrl("http: //baidu.lecai.com/lottery/draw/?agentId=5571");
			article2.setUrl("http: //a0.att.hudong.com/02/72/19300001231741130510727569015_950.jpg");
			articleList.add(article2);
			msg.setArticles(articleList);
			requestEntity.add("requestJson", gson.toJson(msg));
			String result=WxcpApi.send(WxcpApi.NEWS,requestEntity);	*/		
			if("1".equals(result)){
				returnVal.success();
			}else{
				returnVal.fail(result);
			}
		} catch (Throwable e) {
			logger.error("推送微信信息过程中出现异常", e);
			returnVal.fail(e.getMessage());
		}
		return returnVal;
	}
	
	@GetMapping("/sapTest")
	@ResponseBody
	public String sapTest(){
		try{
			List<AikoDeliveryPlan> plans = new ArrayList<>();
			SAPUtils.tiJiaoSAP(new AikoContract(),plans);
			return "成功";
		}catch(Exception e){
			e.printStackTrace();
			return "失败";
		}
	}
	
	//返回假物料
	@GetMapping("/getFalseMetria")
	@ResponseBody
	public List<WuLiao> getFalseMetria(){
		List<WuLiao> wls = new ArrayList<>(5);
		WuLiao wl = new WuLiao("11", "111");
		wls.add(wl);
		wl = new WuLiao("22", "222");
		wls.add(wl);
		wl = new WuLiao("33", "333");
		wls.add(wl);
		wl = new WuLiao("44", "444");
		wls.add(wl);
		wl = new WuLiao("555", "555");
		wls.add(wl);
		return wls;
	}
	
}
